create schema KindergartenManagementSystem;
use  KindergartenManagementSystem;


CREATE TABLE Role (
    role_Id INT PRIMARY KEY AUTO_INCREMENT,
    role_name VARCHAR(20) NOT NULL
);

CREATE TABLE User (
    user_id INT PRIMARY KEY AUTO_INCREMENT,
    fullname VARCHAR(50)NOT NULL,
    date_Of_birth date,
    email VARCHAR(30),
    password VARCHAR(255),
    gender Bit,
    phoneNumber VARCHAR(10),
    address VARCHAR(100),
    image VARCHAR(255),
    status BIT default 1,
    code VARCHAR(7),
    role_id INT default 3,
    FOREIGN KEY (role_id) REFERENCES Role(role_Id)
);

CREATE TABLE Room (
    room_ID INT PRIMARY KEY AUTO_INCREMENT,
    room_number VARCHAR(10),
    status BIT default 1,
    capacity INT
);

CREATE TABLE Subject (
    subject_ID INT PRIMARY KEY AUTO_INCREMENT,
    subject_Code VARCHAR(10),
    subject_name VARCHAR(50),
    description VARCHAR(225),
    status varchar(20)
);

CREATE TABLE Slot (
    slot_id INT PRIMARY KEY AUTO_INCREMENT,
    slot_name VARCHAR(50) ,
    start_time time,
    end_time time
);

CREATE TABLE Student (
    student_ID INT PRIMARY KEY AUTO_INCREMENT,
    date_of_birth date,
    gender BIT,
    student_name VARCHAR(50),
    class_id INT,
    user_id INT,
    FOREIGN KEY (user_id) REFERENCES User(user_id)
);

CREATE TABLE Class_level(
    class_level_ID INT PRIMARY KEY AUTO_INCREMENT,
    class_level_name VARCHAR(50),
    ageRange int,
    description VARCHAR(255)
    
);
CREATE TABLE Class (
    class_ID INT PRIMARY KEY AUTO_INCREMENT,
    class_name VARCHAR(50),
    class_level_ID INT,   
    user_id INT,
    room_ID INT,
    year varchar(10),
    FOREIGN KEY (user_id) REFERENCES User(user_id),
    FOREIGN KEY (room_ID) REFERENCES Room(room_ID),
    FOREIGN KEY (class_level_ID) REFERENCES Class_level(class_level_ID)
);


CREATE TABLE Term(
    term_ID INT PRIMARY KEY AUTO_INCREMENT,
    term_name VARCHAR(50),
    start_Date date,
    end_Date date,
    year int
);

CREATE TABLE Schedule (
    schedule_ID INT PRIMARY KEY AUTO_INCREMENT,
    day_of_week varchar(15),
    date date,
    term_ID INT,
    class_id INT,
    slotId INT,
    FOREIGN KEY (class_id) REFERENCES Class(class_ID),
    FOREIGN KEY (slotId) REFERENCES Slot(slot_id),
     FOREIGN KEY (term_ID) REFERENCES Term(term_ID)
);

CREATE TABLE Attendance (
    attendence_id INT PRIMARY KEY AUTO_INCREMENT,
    attend_status Bit,
    date date,
    scheduledend_time INT,
   student_ID INT,
    slotId INT,
    FOREIGN KEY (student_ID) REFERENCES Student(student_ID),
    FOREIGN KEY (slotId) REFERENCES Slot(slot_id)
);

CREATE TABLE Notification (
    notification_ID INT PRIMARY KEY AUTO_INCREMENT,
    title VARCHAR(100),
    content VARCHAR(255),
    date DATE,
    user_id INT,
    FOREIGN KEY (user_id) REFERENCES User(user_id)
);

CREATE TABLE Application (
    application_ID INT PRIMARY KEY AUTO_INCREMENT,
    application_content VARCHAR(255),
    user_id INT,
    date_create DATE,
   application_response VARCHAR(255),
    date_response DATE,
    FOREIGN KEY (user_id) REFERENCES User(user_id)
);

CREATE TABLE subject_Schedule (
    schedule_ID INT,
    subject_ID INT,
    PRIMARY KEY (schedule_ID, subject_ID),
    FOREIGN KEY (schedule_ID) REFERENCES Schedule(schedule_ID),
    FOREIGN KEY (subject_ID) REFERENCES Subject(subject_ID)
);

CREATE TABLE Mark (
    mark_ID INT PRIMARY KEY AUTO_INCREMENT,
     student_ID INT,
    subject_ID INT,
    final_mark VARCHAR(5),
    FOREIGN KEY (student_ID) REFERENCES Student(student_ID),
    FOREIGN KEY (subject_ID) REFERENCES Subject(subject_ID)
);

CREATE TABLE Extracurricular_Activities (
    activity_id INT PRIMARY KEY AUTO_INCREMENT,
    activity_name VARCHAR(255) NOT NULL,
    description TEXT,
    date DATE NOT NULL,
    start_time TIME NOT NULL,
    end_time TIME NOT NULL,
    location VARCHAR(255),
    user_id INT,  
    materials_needed TEXT,
    status VARCHAR(10) NOT NULL CHECK (status IN ('Planned', 'Completed', 'Cancelled')),
    FOREIGN KEY (user_id) REFERENCES User(user_id)  
);

CREATE TABLE Activity_Registrations (
    registration_id INT PRIMARY KEY AUTO_INCREMENT,
    activity_id INT NOT NULL,
    student_id INT NOT NULL,
    registration_date DATE NOT NULL,
    status VARCHAR(10) NOT NULL CHECK (status IN ('Registered', 'Attended', 'Cancelled')),
    parent_approval BOOLEAN DEFAULT FALSE,
    FOREIGN KEY (activity_id) REFERENCES Extracurricular_Activities(activity_id),
    FOREIGN KEY (student_ID) REFERENCES Student(student_ID)  
);

ALTER TABLE Attendance
ADD UNIQUE KEY unique_attendance (student_ID, date, slotId);
ALTER TABLE kindergartenmanagementsystem.application
ADD COLUMN status ENUM('Approved', 'Pending', 'Rejected') NOT NULL DEFAULT 'Pending';



-- Dữ liệu mẫu cho bảng Role
INSERT INTO Role (Role_name) VALUES 

('Admin'), 
('Teacher'), 
('Parent'), 
('Manager'), 
('Enrollment');

-- Dữ liệu mẫu cho bảng User
INSERT INTO User (Fullname, date_Of_birth, Email, Password, gender, phoneNumber, address, image, Status, Code, Role_id) VALUES
('John Doe', '1985-06-12', 'johndoe@gmail.com', 'password123', 1, '1234567890', '123 Main St', 'img1.jpg', 1, 'ABC123', 1),
('Jane Smith', '1990-09-15', 'janesmith@gmail.com', 'password456', 0, '0987654321', '456 Maple St', 'img2.jpg', 1, 'DEF456', 2),
('Alice Johnson', '1987-03-22', 'alicejohnson@gmail.com', 'password789', 0, '1112223333', '789 Oak St', 'img3.jpg', 1, 'GHI789', 3),
('Bob Brown', '1992-07-10', 'bobbrown@gmail.com', 'password012', 1, '2223334444', '321 Pine St', 'img4.jpg', 1, 'JKL012', 4),
('Carol Davis', '1989-11-08', 'caroldavis@gmail.com', 'password345', 0, '3334445555', '654 Elm St', 'img5.jpg', 1, 'MNO345', 5);

-- Dữ liệu mẫu cho bảng Room
INSERT INTO Room (Room_number, Status, capacity) VALUES
('Room A', 1, 20),
('Room B', 1, 25),
('Room C', 1, 30),
('Room D', 1, 15),
('Room E', 1, 18);

-- Dữ liệu mẫu cho bảng Subject
INSERT INTO Subject (subject_Code, Subject_name, Description, Status) VALUES
('ENG101', 'English', 'Basic English skills', 'Active'),
('MATH101', 'Mathematics', 'Basic Math skills', 'Active'),
('SCI101', 'Science', 'Basic Science introduction', 'Active'),
('ART101', 'Art', 'Basic Art and creativity', 'Active'),
('MUS101', 'Music', 'Basic Music theory', 'Active');

-- Dữ liệu mẫu cho bảng Slot
INSERT INTO Slot (Slot_name, Start_time, end_time) VALUES
('Morning Slot', '2024-10-01 08:00:00', '2024-10-01 10:00:00'),
('Mid-Morning Slot', '2024-10-01 10:30:00', '2024-10-01 12:00:00'),
('Afternoon Slot', '2024-10-01 13:00:00', '2024-10-01 15:00:00'),
('Late Afternoon Slot', '2024-10-01 15:30:00', '2024-10-01 17:00:00'),
('Evening Slot', '2024-10-01 18:00:00', '2024-10-01 20:00:00');

-- Dữ liệu mẫu cho bảng Student
INSERT INTO Student (Date_of_birth, gender, Student_name, class_id, User_id) VALUES
('2010-05-10', 1, 'Student A', 1, 4),
('2011-08-22', 0, 'Student B', 2, 4),
('2012-01-15', 1, 'Student C', 3, 4),
('2013-03-18', 0, 'Student D', 4, 4),
('2014-07-25', 1, 'Student E', 5, 4);

-- Dữ liệu mẫu cho bảng Class_level
INSERT INTO Class_level (Class_level_name, AgeRange, Description) VALUES
('Level 1', 5, '5-year-old children'),
('Level 2', 6, '6-year-old children'),
('Level 3', 7, '7-year-old children'),
('Level 4', 8, '8-year-old children'),
('Level 5', 9, '9-year-old children');

-- Dữ liệu mẫu cho bảng Class
INSERT INTO Class (Class_name, Class_level_ID, User_id, Room_ID) VALUES
('Class A', 1, 2, 1),
('Class B', 2, 2, 2),
('Class C', 3, 2, 3),
('Class D', 4, 2, 4),
('Class E', 5, 2, 5);

-- Dữ liệu mẫu cho bảng Term
INSERT INTO Term (Term_name, Start_Date, End_Date, Year) VALUES
('Term 1', '2024-01-01', '2024-03-31', 2024),
('Term 2', '2024-04-01', '2024-06-30', 2024),
('Term 3', '2024-07-01', '2024-09-30', 2024),
('Term 4', '2024-10-01', '2024-12-31', 2024),
('Term 5', '2025-01-01', '2025-03-31', 2025);

-- Dữ liệu mẫu cho bảng Schedule
INSERT INTO Schedule (day_of_week, date, Term_ID, class_id, SlotId) VALUES
(1, '2024-01-01', 1, 1, 1),
(2, '2024-01-02', 1, 2, 2),
(3, '2024-01-03', 1, 3, 3),
(4, '2024-01-04', 1, 4, 4),
(5, '2024-01-05', 1, 5, 5);

-- Dữ liệu mẫu cho bảng Attendance
INSERT INTO Attendance (attend_status, Date, Scheduledend_time, Student_ID, SlotId) VALUES
(1, '2024-01-01', 1, 1, 1),
(0, '2024-01-02', 2, 2, 2),
(1, '2024-01-03', 3, 3, 3),
(1, '2024-01-04', 4, 4, 4),
(0, '2024-01-05', 5, 5, 5);

-- Dữ liệu mẫu cho bảng Notification
INSERT INTO Notification (title, Content, Date, User_id) VALUES
('Holiday Notice', 'School will be closed on public holiday', '2024-01-01', 1),
('Event Notice', 'Annual event on 5th March', '2024-03-05', 2),
('Exam Reminder', 'Exams starting next week', '2024-06-10', 3),
('Sports Day', 'Sports day event on 22nd July', '2024-07-22', 4),
('Fee Reminder', 'Fee payment due on 30th August', '2024-08-30', 5);

-- Dữ liệu mẫu cho bảng Application
INSERT INTO Application (Application_content, User_id, Date_create, Application_response, Date_response) VALUES
('Request for leave', 1, '2024-01-01', 'Approved', '2024-01-02'),
('Request for schedule change', 2, '2024-01-03', 'Pending', null),
('Request for extra class', 3, '2024-01-05', 'Denied', '2024-01-06'),
('Request for new materials', 4, '2024-01-07', 'Approved', '2024-01-08'),
('Request for parent-teacher meeting', 5, '2024-01-09', 'Approved', '2024-01-10');

-- Dữ liệu mẫu cho bảng subject_Schedule
INSERT INTO subject_Schedule (Schedule_ID, Subject_ID) VALUES
(1, 1),
(2, 2),
(3, 3),
(4, 4),
(5, 5);

-- Dữ liệu mẫu cho bảng Mark
INSERT INTO Mark (Student_ID, Subject_ID, Final_mark) VALUES
(1, 1, 'A'),
(2, 2, 'B'),
(3, 3, 'C'),
(4, 4, 'A'),
(5, 5, 'B');

